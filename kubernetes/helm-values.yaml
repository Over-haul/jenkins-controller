agent:
  alwaysPullImage: false
  volumes:
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
    - type: HostPath
      hostPath: /usr/bin/docker
      mountPath: /usr/bin/docker
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/something
  resources:
    requests:
      cpu: 1024m
      memory: 1024Mi
    limits:
      cpu: 1024m
      memory: 1024Mi
additionalAgents:
  jdk:
    podName: jdk
    customJenkinsLabels: jdk
    image: nxtlytics/jenkins-jdk
    tag: v0.0.7-test-03
  nodejs:
    podName: nodejs
    customJenkinsLabels: nodejs
    image: nxtlytics/jenkins-nodejs
    tag: v0.0.7-test-03
  python37:
    podName: python37
    customJenkinsLabels: python37
    image: nxtlytics/jenkins-python37
    tag: v0.0.7-test-03
  python38:
    podName: python38
    customJenkinsLabels: python38
    image: nxtlytics/jenkins-python38
    tag: v0.0.7-test-03
  python39:
    podName: python39
    customJenkinsLabels: python39
    image: nxtlytics/jenkins-python39
    tag: v0.0.7-test-03
  ruby:
    podName: ruby
    customJenkinsLabels: ruby
    image: nxtlytics/jenkins-ruby
    tag: v0.0.7-test-03
  ruby-jemalloc:
    podName: ruby-jemalloc
    customJenkinsLabels: ruby-jemalloc
    image: nxtlytics/jenkins-ruby-jemalloc
    tag: v0.0.7-test-03
  ruby-truffle:
    podName: ruby-truffle
    customJenkinsLabels: ruby-truffle
    image: nxtlytics/jenkins-ruby-truffle
    tag: v0.0.7-test-03
controller:
  image: nxtlytics/jenkins-controller
  tag: v0.0.11
  imagePullPolicy: IfNotPresent
  adminSecret: false
  enableRawHtmlMarkupFormatter: true
  installPlugins: []
  containerEnv:
    - name: DATADOG_JENKINS_PLUGIN_REPORT_WITH
      value: DSD
    - name: DATADOG_JENKINS_PLUGIN_TARGET_HOST
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
  additionalSecrets:
    - name: github-webhook-secret
      value: $((github-webhook-secret))
    - name: github-api-token
      value: $((github-api-token))
    - name: sonarqube-token
      value: $((sonarqube-token))
    - name: sonarqube-url
      value: $((sonarqube-url))
    - name: slack-url
      value: $((slack-url))
    - name: slack-token
      value: $((slack-token))
    - name: azure-ad-client-id
      value: $((azure-ad-client-id))
    - name: azure-ad-client-secret
      value: $((azure-ad-client-secret))
    - name: azure-ad-tenant-id
      value: $((azure-ad-tenant-id))
  ingress:
    enabled: true
    hostName: $((jenkins-hostname))
  secondaryingress:
    enabled: false
  prometheus:
    enabled: true
  jenkinsUrlProtocol: $((http-protocol))
  jenkinsAdminEmail: $((jenkins-email))
  initScripts:
    - |-
      #!/usr/bin/env groovy
      /*
       * This script configures the timezone in Jenkins
       */
      println("=== Configure timezone in Jenkins")
      System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Etc/UTC')
    - |-
      #!/usr/bin/env groovy
      import jenkins.model.Jenkins
      import jenkins.security.QueueItemAuthenticatorConfiguration
      import hudson.model.*
      import org.jenkinsci.plugins.authorizeproject.GlobalQueueItemAuthenticator
      import org.jenkinsci.plugins.authorizeproject.strategy.SystemAuthorizationStrategy

      println("=== Configure Authorize Project")
      GlobalQueueItemAuthenticator auth = new GlobalQueueItemAuthenticator(
          new SystemAuthorizationStrategy()
      )
      QueueItemAuthenticatorConfiguration.get().authenticators.add(auth)
  JCasC:
    enabled: true
    # defaultConfig -> https://github.com/jenkinsci/helm-charts/blob/9b0cbbe5bb4b3f77785e92c7f44445795f8ec754/charts/jenkins/templates/_helpers.tpl#L96-L196
    defaultConfig: true
    securityRealm: |-
      azure:
        clientid: ${azure-ad-client-id}
        clientsecret: ${azure-ad-client-secret}
        tenant: ${azure-ad-tenant-id}
        cacheduration: 0
        fromrequest: true
    authorizationStrategy: |-
      azureAdMatrix:
        permissions:
          - "Overall/Read:$((azure-ad-read-group))"
          - "Job/Build:$((azure-ad-read-group))"
          - "Agent/Build:$((azure-ad-read-group))"
          - "Overall/Administer:$((azure-ad-admin-group))"
    configScripts:
      00-base-config: |
        jenkins:
          systemMessage: |
            <h1>Welcome to our build server.</h1>

            <p>This Jenkins is 100% configured and managed 'as code'.<br>
            Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin.<br>
            JCasC config can be found in the <code>/usr/share/jenkins/ref/casc_configs</code> folder.</p>

            <p>Some settings are still injected from <code>/usr/share/jenkins/ref/init.groovy.d/</code> scripts,<br>
            but these settings will be ported over to JCasC as support becomes available.<br>
            See <a href="https://github.com/nxtlytics/jenkins-controller">https://github.com/nxtlytics/jenkins-controller</a> for more</p>
        unclassified:
          themeManager:
            disableUserThemes: true
            theme: "darkSystem" # use 'dark' for forcing the dark theme regardless of OS settings
      01-github: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "Github WebHook Secret"
                  id: "github-webhook-secret"
                  scope: GLOBAL
                  secret: ${github-webhook-secret}
              - string:
                  description: "Github API Key"
                  id: "github-api-token"
                  scope: GLOBAL
                  secret: ${github-api-token}
              - usernamePassword:
                  id: "github-api-username"
                  scope: GLOBAL
                  username: github-user
                  password: ${github-api-token}
        unclassified:
          githubpluginconfig:
            hookUrl: {{ template "jenkins.url" . }}/github-webhook/
            hookSecretConfigs:
              - credentialsId: "github-webhook-secret"
            configs:
            - apiUrl: "https://api.github.com"
              credentialsId: "github-api-token"
              name: "GitHub"
              manageHooks: false
          globalLibraries:
            libraries:
              - name: "jenkins-library"
                defaultVersion: $(jenkins-library-version)
                retriever:
                  modernSCM:
                    scm:
                      github:
                        repoOwner: $(jenkins-library-repo-owner)
                        repository: $(jenkins-library-repo-name)
                        credentialsId: "github-api-username"
        jobs:
          - script: >
              organizationFolder($(jenkins-library-repo-owner)) {
                description('This contains branch source jobs for $((jenkins-library-repo-owner)) in GitHub')
                displayName($(jenkins-library-repo-owner))
                triggers {
                  cron('@midnight')
                }
                organizations {
                  github {
                    apiUri('https://api.github.com')
                    credentialsId('github-api-username')
                    repoOwner($(jenkins-library-repo-owner))
                    traits {
                      gitHubBranchDiscovery {
                          strategyId(1)
                      }
                      gitHubPullRequestDiscovery {
                          strategyId(1)
                      }
                      sourceWildcardFilter  {
                        includes('*')
                        excludes('')
                      }
                    }
                  }
                }
                projectFactories {
                  workflowMultiBranchProjectFactory {
                    scriptPath('Jenkinsfile')
                  }
                }
                configure {
                  println('== Start of configure inside github org folder ==')
                  def traits = it / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                  traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                      strategyId(1)
                      trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustContributors')
                  }
                  println('== End of configure inside github org folder ==')
                }
              }
      02-sonarqube: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "SonarQube Token"
                  id: "sonarqube-token"
                  scope: GLOBAL
                  secret: ${sonarqube-token}
        unclassified:
          sonarglobalconfiguration:
            buildWrapperEnabled: true
            installations:
              - name: "sonarqube"
                serverUrl: ${sonarqube-url}
                credentialsId: sonarqube-token
        tool:
          sonarrunnerinstallation:
            installations:
              - name: sonar-scanner
                properties:
                  - installSource:
                      installers:
                        - sonarRunnerInstaller:
                            id: "4.0.0.1744"
      03-slack: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  description: "Slack Webhook URL"
                  id: "slack-url"
                  scope: GLOBAL
                  secret: ${slack-url}
              - string:
                  description: "Slack Token"
                  id: "slack-token"
                  scope: GLOBAL
                  secret: ${slack-token}
        unclassified:
          slackNotifier:
            teamDomain: $((slack-team-domain))
            tokenCredentialId: slack-token
